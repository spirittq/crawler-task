// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerClient interface {
	CrawlerDataIncoming(ctx context.Context, opts ...grpc.CallOption) (Crawler_CrawlerDataIncomingClient, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) CrawlerDataIncoming(ctx context.Context, opts ...grpc.CallOption) (Crawler_CrawlerDataIncomingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Crawler_ServiceDesc.Streams[0], "/grpc.Crawler/CrawlerDataIncoming", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerCrawlerDataIncomingClient{stream}
	return x, nil
}

type Crawler_CrawlerDataIncomingClient interface {
	Send(*CrawlerRequest) error
	CloseAndRecv() (*CrawlerResponse, error)
	grpc.ClientStream
}

type crawlerCrawlerDataIncomingClient struct {
	grpc.ClientStream
}

func (x *crawlerCrawlerDataIncomingClient) Send(m *CrawlerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crawlerCrawlerDataIncomingClient) CloseAndRecv() (*CrawlerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CrawlerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrawlerServer is the server API for Crawler service.
// All implementations must embed UnimplementedCrawlerServer
// for forward compatibility
type CrawlerServer interface {
	CrawlerDataIncoming(Crawler_CrawlerDataIncomingServer) error
	mustEmbedUnimplementedCrawlerServer()
}

// UnimplementedCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (UnimplementedCrawlerServer) CrawlerDataIncoming(Crawler_CrawlerDataIncomingServer) error {
	return status.Errorf(codes.Unimplemented, "method CrawlerDataIncoming not implemented")
}
func (UnimplementedCrawlerServer) mustEmbedUnimplementedCrawlerServer() {}

// UnsafeCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServer will
// result in compilation errors.
type UnsafeCrawlerServer interface {
	mustEmbedUnimplementedCrawlerServer()
}

func RegisterCrawlerServer(s grpc.ServiceRegistrar, srv CrawlerServer) {
	s.RegisterService(&Crawler_ServiceDesc, srv)
}

func _Crawler_CrawlerDataIncoming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrawlerServer).CrawlerDataIncoming(&crawlerCrawlerDataIncomingServer{stream})
}

type Crawler_CrawlerDataIncomingServer interface {
	SendAndClose(*CrawlerResponse) error
	Recv() (*CrawlerRequest, error)
	grpc.ServerStream
}

type crawlerCrawlerDataIncomingServer struct {
	grpc.ServerStream
}

func (x *crawlerCrawlerDataIncomingServer) SendAndClose(m *CrawlerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crawlerCrawlerDataIncomingServer) Recv() (*CrawlerRequest, error) {
	m := new(CrawlerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Crawler_ServiceDesc is the grpc.ServiceDesc for Crawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CrawlerDataIncoming",
			Handler:       _Crawler_CrawlerDataIncoming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
